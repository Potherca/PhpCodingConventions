subgraph cluster_Conventions {
    node [
        style = "filled, rounded"
        shape = "record"
    ];

    subgraph cluster_Tags {
        label = "Tags"
        tag_short [label="Short Tags \
            |<TagAllowed> Short tag '&lt;?' allowed \
            |<TagNotAllowed> Short tag '&lt;?' not allowed \
            |<EchoTagAllowed> Short tag '&lt;?=' allowed \
            |<EchoTagNotAllowed> Short tag '&lt;?=' not allowed \
        "]

        tag_closingTag [label="Closing Tags \
            |<Allowed> Closing tag '?&gt;' allowed \
            |<Manditory> Closing tag '?&gt;' manditory \
            |<NotAllowed> Closing tag '?&gt;' not allowed \
        "]
    }//Tags
    
    
    subgraph cluster_NameConventions {
        label = "Naming Conventions"
        /* Available Casing Styles are:

            camel       : camelCase         - camel case, first letter lowercase
            pascal      : PascalCase        - camel case, first letter uppercase
            snake       : snake_case        - snakecase, all letters lowercase
            snakeCaps   : CAPS_SNAKE_CASE   - snakecase, all letters uppercase
            snakePascal : Snake_Pascal_Case - snakecase, all letters lowercase except first of each word

        */

        name_constant [label = "Constant Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]

        name_function [label = "Global Function Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]


        name_class [label = "Class Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
            |<snake_UFirst> Snake_first_letter_uppercase \
        "]


        name_classConstant [label = "Class Constant Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]


        name_classMethod [label = "Class Method Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]

        name_classVariable [label = "Class Variable Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
            |<any> Anything you like \
        "]

        namespace [label="Namespace \
            |<proper> Use Namespace \
            |<poorMans> Use Class/Functions Name instead of Namespace \
        "]

        PhpKeywords [label="PHP Keywords \
            |<lowerCase> PHP Keywords LowerCase (try/catch/if/switch/etc) \
            |<upperCase> PHP Keywords UpperCase (TRY/CATCH/IF/SWITCH/ETC) \
        "]

        PhpConstants [label="PHP Constants \
            |<lowerCase> PHP Constants LowerCase (true/false/null) \
            |<upperCase> PHP Constants UpperCase (TRUE/FALSE/NULL) \
        "]
    }//NameConventions

    subgraph cluster_Whitespace {
        label = "Whitespace"
        
        subgraph cluster_Indentation {
            label = "Indentation"

            indentation [label="General Indentation \
                    |<tabs> Tabs \
                    |<spaces_2> 2 Spaces \
                    |<spaces_4> 4 Spaces \
            "]

            indentation_switch [label = "Switch Indentation \
                    |<case_0> Don`t indent 'case' from 'switch' \
                    |<case_1> Indent 'case' one level from 'switch' \
                    |<case_2> Indent 'case' two levels from 'switch' \
                    |<break_0> Don`t indent 'break' from 'switch' \
                    |<break_1> Indent 'break' one level from 'switch' \
                    |<break_2> Indent 'break' two levels from 'switch' \
            "]
        }//Indentation

        subgraph cluster_LineLength {
            label = "Line Length"
            linelength_hardLimit [label = "Hard Limit \
                |<80> Hard limit on 80 characters \
                |<100> Hard limit on 100 characters \
                |<120> Hard limit on 120 characters \
                |<none> No hard limit on line length \
            "]

            linelength_softLimit [label  = "Soft Limit \
                |<80> Soft limit on 80 characters \
                |<85> Soft limit on 85 characters \
                |<120> Soft limit on 120 characters \
                |<none> No soft limit on line length \
            "]
        }//LineLength


        //@TODO: classAndCrew_sameLine> Class keywords (extends/implements) on the same line as class name \

        subgraph cluster_Braces {
            label = "Brace Placement"

            /* Available Casing Styles are:

                Allman      : Allman style
                             Both opening and closing braces on a seperates line
                             from the class, method or control structure 
                             declaration
                OTBS        : "one true brace style"
                             The opening brace on the same line as the
                             class, method and control structure declaration 
                             with the closing brace on a seperates line. Except 
                             for 'else' and 'elseif' keywords.
                Stroustrup  : Bjarne Stroustrup's adaptation of K&R style
                             The opening brace on the same line as the
                             class/method/control structure declaration with the
                             closing brace on a seperates line. Even for 'else'
                             and 'elseif' keywords. In this context it is only 
                             used for control structures.
                             
                There is also K & R Style (Kernighan and Ritchie) but in the 
                context of declaring each type seperately it doesn't really make 
                sense to use it. It would the same as combining
                
                    - brace_class:Allman
                    - brace_method:Allman
                    - brace_controlStructure:OTBS
                
                KandR       : K & R Style (Kernighan and Ritchie)
                             Both opening and closing braces on a seperates line
                             from the class and method declaration. The opening 
                             brace for the control structure goes on the same 
                             line as the declaration, the closing brace goes on 
                             a seperate line, except for else/elsif/etc.
            */

            brace_class [label="Class \
                |<Allman> Class opening/closing braces on seperate line \
                |<OTBS> Class structure opening/closing braces on same line as declaration \
            "]

            brace_method [label="Function/Method \
                |<Allman> Method opening/closing braces on seperate line \
                |<OTBS> Method structure opening/closing braces on same line as declaration \
            "]

            brace_controlStructure [label="Control Structures \
                |<Allman> Control structure opening/closing braces on seperate line \
                |<OTBS> Control structure opening/closing braces on same line as declaration, except for else/elseif \
                |<Stroustrup> Control structure opening/closing braces on same line as declaration, even for else/elseif \
                |<mandatory> Control structure braces are mandatory \
            "]
        }//Braces

        subgraph cluster_Spaces {
            label="Spaces"

            space_controlStructureBrackets [label="Control Structures \
                |<SpaceOutside> Space between control keyword and opening parenthesis \
                |<NoSpaceOutside> No space between control keyword and opening parenthesis \
                |<SpaceInside> Space between control parenthesis and innards \
                |<NoSpaceInside> No space between control parenthesis and innards \
            "]

            space_methodName [label="Functions/Methods \
                |<spaceAfter> Space between method name and opening parenthesis \
                |<noSpaceAfter> No space between method name and opening parenthesis \
            "]

            space_methodParamsBlock [label="Functions/Methods Parameter Block \
                |<spaceAfter> Space after method parameter block and opening brace \
                |<noSpaceAfter> No space after method parameter block and opening brace \
            "]
        }//Spaces

        lineEnding [label = "Line Endings \
                |<any> Whatever \
                |<LF> UNIX Style (LF) \
                |<CR> Mac Style (CR) \
                |<LFCR> Windows Style (CRLF) \
        "]
    }//Whitespace

    docblocks [label="Dockblocks \
            |<mandatory> Docblocks manditory \
            |<optional> Docblocks optional \
    "]

    declareOrder_method [label = "Method Declaration Order \
            |<visibilityBeforeFinal> abstract/final declared after visibility \
            |<visibilityAfterFinal> abstract/final declared before visibility \
            |<visibilityBeforeStatic> static declared after visibility \
            |<visibilityAfterStatic> static declared before visibility \
    "]

    subgraph cluster_Miscellaneous {
        encoding [label = "File Encoding \
            |<utf8> UTF-8 \
            |<ISO_8859_1> ISO-8859-1 \
        "]

        /*
            @NOTE: We cannot use 'Strict' as that is a reserved word, so we use '_Strict'
        */
        errorLevel [label = "Error Level \
            |<All> E_ALL \
            |<_Strict> E_ALL &#124; E_STRICT \
        "]
    }//Miscellaneous
    
}//Conventions

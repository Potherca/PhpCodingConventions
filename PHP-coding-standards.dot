/*
	!!! DO NOT EDIT THIS FILE !!!

	This file has be generated and your edits will be overwritten
*/
/*
    https://gist.github.com/potherca/6741287

    http://www.graphviz.org/doc/info/lang.html
    http://www.graphviz.org/doc/info/attrs.html

    http://graphviz-dev.appspot.com/

*/
digraph Standards {

    splines = true    
    clusterrank = "local"
    //compound = true

    center = true
    //ratio = "fill"
    //orientation = "landscape"
    root="HORDE"
    //ratio=1
    
    //autosize=false;
    //size="8.267,11.692";
    //resolution=2;    
    //resolution=2400;    
    
    node [
            center = true
            shape = "box"
            style = "rounded"
    ];
    
    edge [
        //constraint = "false"
    ];


    subgraph cluster_Frameworks {
        label = "Frameworks"
        style="filled,rounded"
        fontcolor=white
        color=red
        fillcolor=orange

        node [
            style="filled,rounded"
            shape=box
            color=white
            fontcolor=white
        ];
        
        //CODE      Actual Name             
        PSR     [label="PSR-2",      fillcolor="#2e7bcf"]   // blue
        PEAR    [label="PEAR",       fillcolor="#4e9a06"]   // green
        CAKE    [label="Cake PHP"    fillcolor="#d62738"]   // red      or blue #417282
        CI      [label="CodeIgniter" fillcolor="#ff3c00"]   // orange
        HORDE   [label="Horde"       fillcolor="#556aa1"]   // blue
        SYMFONY [label="Symfony"]
        TYPO    [label="Typo/Flow 3"]
        WP      [label="WordPress"]
        ZEND    [label="Zend"]
    }//Frameworks

    subgraph cluster_Tags {
        label = "Tags"
        
        tag_shortTagAllowed    [label="Short tag '<?' allowed"]
        tag_shortTagNotAllowed [label="Short tag '<?' not allowed"]

        tag_shortEchoTagAllowed    [label="Short tag '<?=' allowed"]
        tag_shortEchoTagNotAllowed [label="Short tag '<?=' not allowed"]

        tag_closingTagAllowed    [label="Closing tag '?>' allowed"]
        tag_closingTagManditory  [label="Closing tag '?>' manditory"]
        tag_closingTagNotAllowed [label="Closing tag '?>' not allowed"]
    }//Tags
    
    
    subgraph cluster_NameConventions {
        label = "Naming Conventions"
        /* Available Casing Styles are:

            camel       : camelCase         - camel case, first letter lowercase
            pascal      : PascalCase        - camel case, first letter uppercase
            snake       : snake_case        - snakecase, all letters lowercase
            snakeCaps   : CAPS_SNAKE_CASE   - snakecase, all letters uppercase
            snakePascal : Snake_Pascal_Case - snakecase, all letters lowercase except first of each word

        */

        subgraph cluster_ConstantName {
            label = "Constant Name"
            name_constant_camel       [label="camelCase"]
            name_constant_pascal      [label="PascalCase"]
            name_constant_snake       [label="snake_case"]
            name_constant_snakeCaps   [label="CAPS_SNAKE_CASE"]
            name_constant_snakePascal [label="Snake_Pascal_Case"]
        }//ConstantName

        subgraph cluster_FunctionName {
            label = "Global Function Name"
            name_function_camel       [label="camelCase"]
            name_function_pascal      [label="PascalCase"]
            name_function_snake       [label="snake_case"]
            name_function_snakeCaps   [label="CAPS_SNAKE_CASE"]
            name_function_snakePascal [label="Snake_Pascal_Case"]
        }//FunctionName


        subgraph cluster_ClassName {
            label = "Class Name"
            name_class_camel        [label="camelCase"]
            name_class_pascal       [label="PascalCase"]
            name_class_snake        [label="snake_case"]
            name_class_snakeCaps    [label="CAPS_SNAKE_CASE"]
            name_class_snakePascal  [label="Snake_Pascal_Case"]
            name_class_snake_UFirst [label="Snake_first_letter_uppercase"]
        }//ClassName


        subgraph cluster_classConstantName {
            label = "Class Constant Name"
            name_classConstant_camel       [label="camelCase"]
            name_classConstant_pascal      [label="PascalCase"]
            name_classConstant_snake       [label="snake_case"]
            name_classConstant_snakeCaps   [label="CAPS_SNAKE_CASE"]
            name_classConstant_snakePascal [label="Snake_Pascal_Case"]
        }//ClassConstantName


        subgraph cluster_classMethodName {
            label = "Class Method Name"
            name_classMethod_camel       [label="camelCase"]
            name_classMethod_pascal      [label="PascalCase"]
            name_classMethod_snake       [label="snake_case"]
            name_classMethod_snakeCaps   [label="CAPS_SNAKE_CASE"]
            name_classMethod_snakePascal [label="Snake_Pascal_Case"]
        }//ClassMethodName

        subgraph cluster_classVariableName {
            label = "Class Variable Name"
            name_classVariable_camel       [label="camelCase"]
            name_classVariable_pascal      [label="PascalCase"]
            name_classVariable_snake       [label="snake_case"]
            name_classVariable_snakeCaps   [label="CAPS_SNAKE_CASE"]
            name_classVariable_snakePascal [label="Snake_Pascal_Case"]
            name_classVariable_any         [label="Anything you like"]
        }//ClassVariableName

        subgraph cluster_Namespace {
            label="Namespace"
            namespace_proper [label="Use Namespace"]
            namespace_poorMans [label="Use Class/Functions Name instead of Namespace"]
        }//Namespace

        subgraph cluster_PhpCasing {
            PhpKeywords_lowerCase  [label="PHP Keywords LowerCase (try/catch/if/switch/etc)"]
            PhpKeywords_upperCase  [label="PHP Keywords UpperCase (TRY/CATCH/IF/SWITCH/ETC)"]

            PhpConstants_lowerCase [label="PHP Constants LowerCase (true/false/null)"]
            PhpConstants_upperCase [label="PHP Constants UpperCase (TRUE/FALSE/NULL)"]
        }//PhpCasing
    }//NameConventions

    subgraph cluster_Whitespace {
        label = "Whitespace"
        
        subgraph cluster_Indentation {
            label = "Indentation"

            subgraph cluster_General {
                label="General Indentation"
                indentation_tabs    [label="Tabs"]
                indentation_2spaces [label="2 Spaces"]
                indentation_4spaces [label="4 Spaces"]
            }//General

            subgraph cluster_SwitchIndentation {
                label = "Switch"

                indentation_switch_case_0   [label="Don`t indent 'case' from 'switch'"]
                indentation_switch_case_1   [label="Indent 'case' one level from 'switch'"]
                indentation_switch_case_2   [label="Indent 'case' two levels from 'switch'"]
        
                indentation_switch_break_0   [label="Don`t indent 'break' from 'switch'"]
                indentation_switch_break_1   [label="Indent 'break' one level from 'switch'"]
                indentation_switch_break_2   [label="Indent 'break' two levels from 'switch'"]
            }//SwitchIndentation
        }//Indentation

        subgraph cluster_LineLength {
            label = "Line Length"

            linelength_HardLimit80  [label="Hard limit on 80 characters"]
            linelength_HardLimit100 [label="Hard limit on 100 characters"]
            linelength_HardLimit120 [label="Hard limit on 120 characters"]
            linelength_noHardLimit  [label="No hard limit on line length"]

            linelength_softLimit80  [label="Soft limit on 80 characters"]
            linelength_softLimit85  [label="Soft limit on 85 characters"]
            linelength_softLimit120 [label="Soft limit on 120 characters"]
            linelength_noSoftLimit  [label="No soft limit on line length"]
        }//LineLength


        classAndCrew_sameLine [label="Class keywords (extends/implements) on the same line as class name"]

        subgraph cluster_Braces {
            label = "Brace Placement"

            /* Available Casing Styles are:

                Allman      : Allman style
                             Both opening and closing braces on a seperates line
                             from the class, method or control structure 
                             declaration
                OTBS        : "one true brace style"
                             The opening brace on the same line as the
                             class, method and control structure declaration 
                             with the closing brace on a seperates line. Except 
                             for 'else' and 'elseif' keywords.
                Stroustrup  : Bjarne Stroustrup's adaptation of K&R style
                             The opening brace on the same line as the
                             class/method/control structure declaration with the
                             closing brace on a seperates line. Even for 'else'
                             and 'elseif' keywords. In this context it is only 
                             used for control structures.
                             
                There is also K & R Style (Kernighan and Ritchie) but in the 
                context of declaring each type seperately it doesn't really make 
                sense to use it. It would the same as combining
                
                    - brace_class_Allman
                    - brace_method_Allman
                    - brace_controlStructure_OTBS
                
                KandR       : K & R Style (Kernighan and Ritchie)
                             Both opening and closing braces on a seperates line
                             from the class and method declaration. The opening 
                             brace for the control structure goes on the same 
                             line as the declaration, the closing brace goes on 
                             a seperate line, except for else/elsif/etc.
            */

            subgraph cluster_ClassStructure {
                label="Class"
                brace_class_Allman  [label="Class opening/closing braces on seperate line"]
                brace_class_OTBS    [label="Class structure opening/closing braces on same line as declaration"]
            }

            subgraph cluster_Method {
                label="Function/Method"
                brace_method_Allman [label="Method opening/closing braces on seperate line"]
                brace_method_OTBS   [label="Method structure opening/closing braces on same line as declaration"]
            }

            subgraph cluster_ControlStructureBraces {
                label="Control Structures"
                brace_controlStructure_Allman       [label="Control structure opening/closing braces on seperate line"]
                brace_controlStructure_OTBS         [label="Control structure opening/closing braces on same line as declaration, except for else/elseif"]
                brace_controlStructure_Stroustrup   [label="Control structure opening/closing braces on same line as declaration, even for else/elseif"]
                
                brace_controlStructure_mandatory [label="Control structure braces are mandatory"]
            }//ControlStructure
        }//Braces

        subgraph cluster_Spaces {
            label="Spaces"

            subgraph cluster_ControlStructureSpaces {
                label="Control Structures"
                space_controlStructureKeyword_spaceAfter      [label="Space between control keyword and opening parenthesis"]
                space_controlStructureKeyword_noSpaceAfter    [label="No space between control keyword and opening parenthesis"]
    
                space_controlStructureParentheses_spaces      [label="Space between control parenthesis and innards"]
                space_controlStructureParentheses_noSpaces    [label="No space between control parenthesis and innards"]
            }//ControlStructure

            subgraph cluster_MethodName {
                label="Functions/Methods"
                space_methodName_spaceAfter   [label="Space between method name and opening parenthesis"]
                space_methodName_noSpaceAfter [label="No space between method name and opening parenthesis"]

                space_methodParamsBlock_spaceAfter   [label="Space after method parameter block and opening brace"]
                space_methodParamsBlock_noSpaceAfter [label="No space after method parameter block and opening brace"]
            }//MethodName
        }//Spaces
    }//Whitespace

    subgraph cluster_Comments {
        docblocks_mandatory [label="Docblocks manditory"]
        docblocks_optional  [label="Docblocks optional"]
    }//Comments

    subgraph cluster_DeclareOrder {
        label = "Method Declaration Order"

        declareOrder_method_visibilityBeforeFinal   [label="abstract/final declared after visibility"]
        declareOrder_method_visibilityAfterFinal    [label="abstract/final declared before visibility"]

        declareOrder_method_visibilityBeforeStatic  [label="static declared after visibility"]
        declareOrder_method_visibilityAfterStatic   [label="static declared before visibility"]
    }//DeclareOrder

    subgraph cluster_Miscellaneous {
        subgraph cluster_FileEncoding {
            label = "File Encoding"
            encoding_utf8       [label="UTF-8"]
            encoding_ISO_8859_1 [label="ISO-8859-1"]
        }//FileEncoding

        subgraph cluster_ErrorLevel {
            label = "Error Level"
             errorLevel_All [label="E_ALL"]
             errorLevel_Strict  [label="E_ALL | E_STRICT"]
        }//ErrorLevel

        subgraph cluster_LineEnding {
            label = "Line Endings"
            lineEnding_any  [label="Whatever"]
            lineEnding_LF   [label="UNIX Style (LF)"]
            lineEnding_CR   [label="Mac Style (CR)"]
            lineEnding_LFCR [label="Windows Style (CRLF)"]
        }//FileEncoding
    }//Miscellaneous

/*
 *  CAKE PHP Coding Conventions
 */
    edge [color="#d62738"]

    CAKE -> indentation_tabs
    CAKE -> space_controlStructureKeyword_spaceAfter
    CAKE -> space_controlStructureParentheses_spaces
    CAKE -> brace_controlStructure_mandatory
    CAKE -> brace_controlStructure_OTBS
    CAKE -> brace_class_Allman
    CAKE -> brace_method_Allman
    CAKE -> space_methodName_noSpaceAfter
    CAKE -> space_methodParamsBlock_spaceAfter
    CAKE -> docblocks_optional
    CAKE -> tag_shortTagNotAllowed
    CAKE -> name_function_camel
    CAKE -> name_classMethod_camel
    CAKE -> name_class_pascal
    CAKE -> name_classVariable_camel
    CAKE -> name_classVariable_pascal
    CAKE -> name_constant_snakeCaps
    CAKE -> name_classConstant_snakeCaps
/*CAKE*/

/*
 *  Code Igniter Coding Conventions
 */
    edge [color="#ff3c00"]

    CI -> encoding_utf8
    CI -> tag_closingTagNotAllowed
    CI -> name_class_snake_UFirst
    CI -> name_classMethod_snake
    CI -> name_classVariable_snake
    CI -> docblocks_optional
    CI -> name_classConstant_snakeCaps
    CI -> name_constant_snakeCaps
    CI -> PhpConstants_upperCase
    CI -> indentation_tabs
    CI -> lineEnding_LF
    CI -> brace_class_OTBS
    CI -> brace_method_Allman
    CI -> brace_controlStructure_Allman
    CI -> tag_shortTagNotAllowed
/*Code Igniter*/

/*
 *  HORDE Coding Conventions
 */
    edge [color="#556aa1"]

    HORDE -> indentation_4spaces
    HORDE -> PhpConstants_lowerCase
    HORDE -> brace_controlStructure_OTBS
    HORDE -> space_controlStructureKeyword_spaceAfter
    HORDE -> brace_controlStructure_mandatory
    HORDE -> indentation_switch_case_0
    HORDE -> indentation_switch_break_1
    HORDE -> space_methodName_noSpaceAfter
    HORDE -> brace_method_Allman
    HORDE -> brace_class_Allman
    HORDE -> docblocks_mandatory
    HORDE -> tag_shortTagNotAllowed
    HORDE -> tag_closingTagNotAllowed
    HORDE -> linelength_HardLimit100
    HORDE -> linelength_softLimit80
    HORDE -> lineEnding_LF
    HORDE -> errorLevel_All
/*HORDE*/

/*
 *  PEAR Coding Conventions
 */
    edge [color="#4e9a06"]
    
    PEAR -> indentation_4spaces
    PEAR -> linelength_noHardLimit
    PEAR -> linelength_softLimit85
    PEAR -> brace_controlStructure_OTBS
    PEAR -> indentation_switch_case_0
    PEAR -> indentation_switch_break_1
    PEAR -> brace_class_Allman
    PEAR -> brace_method_Allman
    PEAR -> docblocks_mandatory
    PEAR -> tag_shortTagNotAllowed
    PEAR -> name_function_pascal
    PEAR -> namespace_poorMans
    PEAR -> name_class_pascal
    PEAR -> name_classMethod_camel
    PEAR -> name_classVariable_camel
    PEAR -> name_constant_snakeCaps
    PEAR -> name_classConstant_snakeCaps
    PEAR -> encoding_utf8
    PEAR -> encoding_ISO_8859_1
    PEAR -> lineEnding_LF
    PEAR -> errorLevel_Strict
    PEAR -> space_controlStructureKeyword_spaceAfter
/*PEAR*/

/*
 *  PSR2 Coding Conventions
 */
    edge [color="#2e7bcf"]

    // PSR-0
    PSR -> namespace_proper
    
    // PSR-1
    PSR -> encoding_utf8
    PSR -> tag_shortEchoTagAllowed
    PSR -> tag_shortTagNotAllowed
    PSR -> name_class_pascal
    PSR -> name_classConstant_snakeCaps
    PSR -> name_classMethod_camel
    PSR -> tag_shortEchoTagAllowed
    PSR -> tag_shortTagNotAllowed
    PSR -> name_classVariable_any
    
    // PSR-2
    PSR -> indentation_4spaces
    PSR -> linelength_softLimit120
    PSR -> linelength_noHardLimit
    PSR -> brace_class_Allman
    PSR -> brace_method_Allman
    PSR -> declareOrder_method_visibilityAfterStatic
    PSR -> declareOrder_method_visibilityBeforeStatic
    PSR -> space_controlStructureKeyword_spaceAfter
    PSR -> space_methodName_noSpaceAfter
    PSR -> brace_controlStructure_OTBS
    PSR -> lineEnding_LF
    PSR -> tag_closingTagNotAllowed
    PSR -> PhpConstants_lowerCase
    PSR -> classAndCrew_sameLine
    PSR -> space_controlStructureParentheses_spaces
    PSR -> indentation_switch_case_1
    PSR -> indentation_switch_break_2
/*PSR2*/

}//Standards

#EOF

/*
	!!! DO NOT EDIT THIS FILE !!!

	This file has be generated and your edits will be overwritten
*/
/*
    http://www.graphviz.org/doc/info/lang.html
    http://www.graphviz.org/doc/info/attrs.html

    http://graphviz-dev.appspot.com/

*/
digraph Standards {

    layout = fdp
    splines = true
    center = true

    compound=true
    remincross=true

    rankdir = "LR"  // So the record boxes get stacked horizontally
    
    edge [
        // The default style is fine
    ];


subgraph cluster_Conventions {
    node [
        style = "filled, rounded"
        shape = "record"
    ];

    subgraph cluster_Tags {
        label = "Tags"
        tag_short [label="Short Tags \
            |<TagAllowed> Short tag '&lt;?' allowed \
            |<TagNotAllowed> Short tag '&lt;?' not allowed \
            |<EchoTagAllowed> Short tag '&lt;?=' allowed \
            |<EchoTagNotAllowed> Short tag '&lt;?=' not allowed \
        "]

        tag_closingTag [label="Closing Tags \
            |<Allowed> Closing tag '?&gt;' allowed \
            |<Manditory> Closing tag '?&gt;' manditory \
            |<NotAllowed> Closing tag '?&gt;' not allowed \
        "]
    }//Tags
    
    
    subgraph cluster_NameConventions {
        label = "Naming Conventions"
        /* Available Casing Styles are:

            camel       : camelCase         - camel case, first letter lowercase
            pascal      : PascalCase        - camel case, first letter uppercase
            snake       : snake_case        - snakecase, all letters lowercase
            snakeCaps   : CAPS_SNAKE_CASE   - snakecase, all letters uppercase
            snakePascal : Snake_Pascal_Case - snakecase, all letters lowercase except first of each word

        */

        name_constant [label = "Constant Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]

        name_function [label = "Global Function Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]


        name_class [label = "Class Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
            |<snake_UFirst> Snake_first_letter_uppercase \
        "]


        name_classConstant [label = "Class Constant Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]


        name_classMethod [label = "Class Method Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
        "]

        name_classVariable [label = "Class Variable Name \
            |<camel> camelCase \
            |<pascal> PascalCase \
            |<snake> snake_case \
            |<snakeCaps> CAPS_SNAKE_CASE \
            |<snakePascal> Snake_Pascal_Case \
            |<any> Anything you like \
        "]

        namespace [label="Namespace \
            |<proper> Use Namespace \
            |<poorMans> Use Class/Functions Name instead of Namespace \
        "]

        PhpKeywords [label="PHP Keywords \
            |<lowerCase> PHP Keywords LowerCase (try/catch/if/switch/etc) \
            |<upperCase> PHP Keywords UpperCase (TRY/CATCH/IF/SWITCH/ETC) \
        "]

        PhpConstants [label="PHP Constants \
            |<lowerCase> PHP Constants LowerCase (true/false/null) \
            |<upperCase> PHP Constants UpperCase (TRUE/FALSE/NULL) \
        "]
    }//NameConventions

    subgraph cluster_Whitespace {
        label = "Whitespace"
        
        subgraph cluster_Indentation {
            label = "Indentation"

            indentation [label="General Indentation \
                    |<tabs> Tabs \
                    |<spaces_2> 2 Spaces \
                    |<spaces_4> 4 Spaces \
            "]

            indentation_switch [label = "Switch Indentation \
                    |<case_0> Don`t indent 'case' from 'switch' \
                    |<case_1> Indent 'case' one level from 'switch' \
                    |<case_2> Indent 'case' two levels from 'switch' \
                    |<break_0> Don`t indent 'break' from 'switch' \
                    |<break_1> Indent 'break' one level from 'switch' \
                    |<break_2> Indent 'break' two levels from 'switch' \
            "]
        }//Indentation

        subgraph cluster_LineLength {
            label = "Line Length"
            linelength_hardLimit [label = "Hard Limit \
                |<80> Hard limit on 80 characters \
                |<100> Hard limit on 100 characters \
                |<120> Hard limit on 120 characters \
                |<none> No hard limit on line length \
            "]

            linelength_softLimit [label  = "Soft Limit \
                |<80> Soft limit on 80 characters \
                |<85> Soft limit on 85 characters \
                |<120> Soft limit on 120 characters \
                |<none> No soft limit on line length \
            "]
        }//LineLength


        //@TODO: classAndCrew_sameLine> Class keywords (extends/implements) on the same line as class name \

        subgraph cluster_Braces {
            label = "Brace Placement"

            /* Available Casing Styles are:

                Allman      : Allman style
                             Both opening and closing braces on a seperates line
                             from the class, method or control structure 
                             declaration
                OTBS        : "one true brace style"
                             The opening brace on the same line as the
                             class, method and control structure declaration 
                             with the closing brace on a seperates line. Except 
                             for 'else' and 'elseif' keywords.
                Stroustrup  : Bjarne Stroustrup's adaptation of K&R style
                             The opening brace on the same line as the
                             class/method/control structure declaration with the
                             closing brace on a seperates line. Even for 'else'
                             and 'elseif' keywords. In this context it is only 
                             used for control structures.
                             
                There is also K & R Style (Kernighan and Ritchie) but in the 
                context of declaring each type seperately it doesn't really make 
                sense to use it. It would the same as combining
                
                    - brace_class:Allman
                    - brace_method:Allman
                    - brace_controlStructure:OTBS
                
                KandR       : K & R Style (Kernighan and Ritchie)
                             Both opening and closing braces on a seperates line
                             from the class and method declaration. The opening 
                             brace for the control structure goes on the same 
                             line as the declaration, the closing brace goes on 
                             a seperate line, except for else/elsif/etc.
            */

            brace_class [label="Class \
                |<Allman> Class opening/closing braces on seperate line \
                |<OTBS> Class structure opening/closing braces on same line as declaration \
            "]

            brace_method [label="Function/Method \
                |<Allman> Method opening/closing braces on seperate line \
                |<OTBS> Method structure opening/closing braces on same line as declaration \
            "]

            brace_controlStructure [label="Control Structures \
                |<Allman> Control structure opening/closing braces on seperate line \
                |<OTBS> Control structure opening/closing braces on same line as declaration, except for else/elseif \
                |<Stroustrup> Control structure opening/closing braces on same line as declaration, even for else/elseif \
                |<mandatory> Control structure braces are mandatory \
            "]
        }//Braces

        subgraph cluster_Spaces {
            label="Spaces"

            space_controlStructureBrackets [label="Control Structures \
                |<SpaceOutside> Space between control keyword and opening parenthesis \
                |<NoSpaceOutside> No space between control keyword and opening parenthesis \
                |<SpaceInside> Space between control parenthesis and innards \
                |<NoSpaceInside> No space between control parenthesis and innards \
            "]

            space_methodName [label="Functions/Methods \
                |<spaceAfter> Space between method name and opening parenthesis \
                |<noSpaceAfter> No space between method name and opening parenthesis \
            "]

            space_methodParamsBlock [label="Functions/Methods Parameter Block \
                |<spaceAfter> Space after method parameter block and opening brace \
                |<noSpaceAfter> No space after method parameter block and opening brace \
            "]
        }//Spaces

        lineEnding [label = "Line Endings \
                |<any> Whatever \
                |<LF> UNIX Style (LF) \
                |<CR> Mac Style (CR) \
                |<LFCR> Windows Style (CRLF) \
        "]
    }//Whitespace

    docblocks [label="Dockblocks \
            |<mandatory> Docblocks manditory \
            |<optional> Docblocks optional \
    "]

    declareOrder_method [label = "Method Declaration Order \
            |<visibilityBeforeFinal> abstract/final declared after visibility \
            |<visibilityAfterFinal> abstract/final declared before visibility \
            |<visibilityBeforeStatic> static declared after visibility \
            |<visibilityAfterStatic> static declared before visibility \
    "]

    subgraph cluster_Miscellaneous {
        encoding [label = "File Encoding \
            |<utf8> UTF-8 \
            |<ISO_8859_1> ISO-8859-1 \
        "]

        /*
            @NOTE: We cannot use 'Strict' as that is a reserved word, so we use '_Strict'
        */
        errorLevel [label = "Error Level \
            |<All> E_ALL \
            |<_Strict> E_ALL &#124; E_STRICT \
        "]
    }//Miscellaneous
    
}//Conventions
    subgraph cluster_Frameworks {

        label = "Frameworks"
        style = "filled,rounded"
        fontcolor = "white"
        color = "#666699"       // Dark PHP purple
        fillcolor = "#9999CC"   // Light PHP purple

        node [
            style="filled,rounded"
            shape=box
            color=white
            fontcolor=white
        ];
        
        //CODE      Actual Name             
        CAKE    [label="Cake PHP"    fillcolor="#d62738"]   // red      or blue #417282
        CI      [label="CodeIgniter" fillcolor="#ff3c00"]   // orange
        HORDE   [label="Horde"       fillcolor="#556aa1"]   // blue
        PEAR    [label="PEAR",       fillcolor="#4e9a06"]   // green
        PSR     [label="PSR-2",      fillcolor="#2e7bcf"]   // blue
        SYMFONY [label="Symfony"     fillcolor="#303030"]   // black
        TYPO3   [label="Typo/Flow 3" fillcolor="#FF8600"]   // orange
        WP      [label="WordPress"   ]//fillcolor="#21759b"]   // blue
        ZEND    [label="Zend"        ]//fillcolor="#6AB54B"]   // green
    }//Frameworks


/*
 *  CAKE PHP Coding Conventions
 */
    edge [
        color="#d62738"
        arrowhead="normal"
    ]

    CAKE -> indentation:tabs
    CAKE -> space_controlStructureBrackets:SpaceOutside
    CAKE -> space_controlStructureBrackets:SpaceInside
    CAKE -> brace_controlStructure:mandatory
    CAKE -> brace_controlStructure:OTBS
    CAKE -> brace_class:Allman
    CAKE -> brace_method:Allman
    CAKE -> space_methodName:noSpaceAfter
    CAKE -> space_methodParamsBlock:spaceAfter
    CAKE -> docblocks:optional
    CAKE -> tag_short:TagNotAllowed
    CAKE -> name_function:camel
    CAKE -> name_classMethod:camel
    CAKE -> name_class:pascal
    CAKE -> name_classVariable:camel
    CAKE -> name_classVariable:pascal
    CAKE -> name_constant:snakeCaps
    CAKE -> name_classConstant:snakeCaps
/*CAKE*/

/*
 *  Code Igniter Coding Conventions
 */
    edge [
        color="#ff3c00"
        arrowhead="diamond"
    ]

    CI -> encoding:utf8
    CI -> tag_closingTag:NotAllowed
    CI -> name_class:snake_UFirst
    CI -> name_classMethod:snake
    CI -> name_classVariable:snake
    CI -> docblocks:optional
    CI -> name_classConstant:snakeCaps
    CI -> name_constant:snakeCaps
    CI -> PhpConstants:upperCase
    CI -> indentation:tabs
    CI -> lineEnding:LF
    CI -> brace_class:OTBS
    CI -> brace_method:Allman
    CI -> brace_controlStructure:Allman
    CI -> tag_short:TagNotAllowed
/*Code Igniter*/

/*
 *  HORDE Coding Conventions
 */
    edge [
        color="#556aa1"
        arrowhead="box"
    ]

    HORDE -> indentation:spaces_4
    HORDE -> PhpConstants:lowerCase
    HORDE -> brace_controlStructure:OTBS
    HORDE -> space_controlStructureBrackets:SpaceOutside
    HORDE -> brace_controlStructure:mandatory
    HORDE -> indentation_switch:case_0
    HORDE -> indentation_switch:break_1
    HORDE -> space_methodName:noSpaceAfter
    HORDE -> brace_method:Allman
    HORDE -> brace_class:Allman
    HORDE -> docblocks:mandatory
    HORDE -> tag_short:TagNotAllowed
    HORDE -> tag_closingTag:NotAllowed
    HORDE -> linelength_hardLimit:100
    HORDE -> linelength_softLimit:80
    HORDE -> lineEnding:LF
    HORDE -> errorLevel:All
/*HORDE*/

/*
 *  PEAR Coding Conventions
 */
    edge [
        color="#4e9a06"
        arrowhead="dot"
    ]
    
    PEAR -> indentation:spaces_4
    PEAR -> linelength_hardLimit:none
    PEAR -> linelength_softLimit:85
    PEAR -> brace_controlStructure:OTBS
    PEAR -> indentation_switch:case_0
    PEAR -> indentation_switch:break_1
    PEAR -> brace_class:Allman
    PEAR -> brace_method:Allman
    PEAR -> docblocks:mandatory
    PEAR -> tag_short:TagNotAllowed
    PEAR -> name_function:pascal
    PEAR -> namespace:poorMans
    PEAR -> name_class:pascal
    PEAR -> name_classMethod:camel
    PEAR -> name_classVariable:camel
    PEAR -> name_constant:snakeCaps
    PEAR -> name_classConstant:snakeCaps
    PEAR -> encoding:utf8
    PEAR -> encoding:ISO_8859_1
    PEAR -> lineEnding:LF
    PEAR -> errorLevel:_Strict
    PEAR -> space_controlStructureBrackets:SpaceOutside
/*PEAR*/

/*
 *  PSR2 Coding Conventions
 */
    edge [
        color="#2e7bcf"
        arrowhead = "onormal"
    ]

    // PSR-0
    PSR -> namespace:proper
    
    // PSR-1
    PSR -> encoding:utf8
    PSR -> tag_short:EchoTagAllowed
    PSR -> tag_short:TagNotAllowed
    PSR -> name_class:pascal
    PSR -> name_classConstant:snakeCaps
    PSR -> name_classMethod:camel
    PSR -> name_classVariable:any
    
    // PSR-2
    PSR -> indentation:spaces_4
    PSR -> linelength_softLimit:120
    PSR -> linelength_hardLimit:none
    PSR -> brace_class:Allman
    PSR -> brace_method:Allman
    PSR -> declareOrder_method:visibilityAfterStatic
    PSR -> declareOrder_method:visibilityBeforeStatic
    PSR -> space_controlStructureBrackets:SpaceOutside
    PSR -> space_methodName:noSpaceAfter
    PSR -> brace_controlStructure:OTBS
    PSR -> lineEnding:LF
    PSR -> tag_closingTag:NotAllowed
    PSR -> PhpConstants:lowerCase
//     PSR -> classAndCrew:sameLine
    PSR -> space_controlStructureBrackets:SpaceInside
    PSR -> indentation_switch:case_1
    PSR -> indentation_switch:break_2
/*PSR2*/

/*
 *  SYMFONY2 Coding Conventions
 */
    edge [
        color="#303030"
        arrowhead = "odiamond"
    ]
//*/
    SYMFONY -> PSR
/*/
    // PSR-0
    SYMFONY -> namespace:proper

    // PSR-1
    SYMFONY -> encoding:utf8
    SYMFONY -> tag_short:EchoTagAllowed
    SYMFONY -> tag_short:TagNotAllowed
    SYMFONY -> name_class:pascal
    SYMFONY -> name_classConstant:snakeCaps
    SYMFONY -> name_classMethod:camel
    SYMFONY -> tag_short:EchoTagAllowed
    SYMFONY -> tag_short:TagNotAllowed
    SYMFONY -> name_classVariable:any
    
    // PSR-2
    SYMFONY -> indentation:spaces_4
    SYMFONY -> linelength_softLimit:120
    SYMFONY -> linelength_hardLimit:none
    SYMFONY -> brace_class:Allman
    SYMFONY -> brace_method:Allman
    SYMFONY -> declareOrder_method:visibilityAfterStatic
    SYMFONY -> declareOrder_method:visibilityBeforeStatic
    SYMFONY -> space_controlStructureBrackets:SpaceOutside
    SYMFONY -> space_methodName:noSpaceAfter
    SYMFONY -> brace_controlStructure:OTBS
    SYMFONY -> lineEnding:LF
    SYMFONY -> tag_closingTag:NotAllowed
    SYMFONY -> PhpConstants:lowerCase
    SYMFONY -> space_controlStructureBrackets:SpaceInside
    SYMFONY -> indentation_switch:case_1
    SYMFONY -> indentation_switch:break_2
/*SYMFONY2*/

/*
 *  TYPO3 Coding Conventions
 */
    edge [
        color="#FF8600"
        arrowhead = "obox"
    ]


    TYPO3 -> tag_closingTag:Manditory
    TYPO3 -> linelength_hardLimit:none
    TYPO3 -> linelength_softLimit:none
    TYPO3 -> lineEnding:LF
    TYPO3 -> encoding:utf8
    TYPO3 -> indentation:tabs
    TYPO3 -> name_class:pascal
    TYPO3 -> name_classMethod:camel
    TYPO3 -> name_classVariable:camel
    TYPO3 -> name_classConstant:snakeCaps
    TYPO3 -> name_constant:snakeCaps
    TYPO3 -> PhpConstants:upperCase
    TYPO3 -> space_controlStructureBrackets:SpaceOutside
    TYPO3 -> space_controlStructureBrackets:SpaceInside
    TYPO3 -> brace_controlStructure:OTBS
    TYPO3 -> indentation_switch:case_1
    TYPO3 -> indentation_switch:break_1
    TYPO3 -> docblocks:mandatory
    TYPO3 -> namespace:poorMans
    TYPO3 -> tag_short:TagNotAllowed
    
/*TYPO3*/

}//Standards

#EOF
